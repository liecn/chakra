// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: et_def.proto

#include "et_def.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ChakraProtoMsg {
PROTOBUF_CONSTEXPR AttributeProto::AttributeProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AttributeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeProtoDefaultTypeInternal() {}
  union {
    AttributeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeProtoDefaultTypeInternal _AttributeProto_default_instance_;
PROTOBUF_CONSTEXPR DoubleList::DoubleList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DoubleListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoubleListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoubleListDefaultTypeInternal() {}
  union {
    DoubleList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoubleListDefaultTypeInternal _DoubleList_default_instance_;
PROTOBUF_CONSTEXPR FloatList::FloatList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FloatListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatListDefaultTypeInternal() {}
  union {
    FloatList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatListDefaultTypeInternal _FloatList_default_instance_;
PROTOBUF_CONSTEXPR Int32List::Int32List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Int32ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int32ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int32ListDefaultTypeInternal() {}
  union {
    Int32List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int32ListDefaultTypeInternal _Int32List_default_instance_;
PROTOBUF_CONSTEXPR Int64List::Int64List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Int64ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Int64ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Int64ListDefaultTypeInternal() {}
  union {
    Int64List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Int64ListDefaultTypeInternal _Int64List_default_instance_;
PROTOBUF_CONSTEXPR Uint32List::Uint32List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Uint32ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Uint32ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Uint32ListDefaultTypeInternal() {}
  union {
    Uint32List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Uint32ListDefaultTypeInternal _Uint32List_default_instance_;
PROTOBUF_CONSTEXPR Uint64List::Uint64List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Uint64ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Uint64ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Uint64ListDefaultTypeInternal() {}
  union {
    Uint64List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Uint64ListDefaultTypeInternal _Uint64List_default_instance_;
PROTOBUF_CONSTEXPR Sint32List::Sint32List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sint32ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sint32ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sint32ListDefaultTypeInternal() {}
  union {
    Sint32List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sint32ListDefaultTypeInternal _Sint32List_default_instance_;
PROTOBUF_CONSTEXPR Sint64List::Sint64List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._values_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sint64ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sint64ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sint64ListDefaultTypeInternal() {}
  union {
    Sint64List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sint64ListDefaultTypeInternal _Sint64List_default_instance_;
PROTOBUF_CONSTEXPR Fixed32List::Fixed32List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Fixed32ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fixed32ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fixed32ListDefaultTypeInternal() {}
  union {
    Fixed32List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fixed32ListDefaultTypeInternal _Fixed32List_default_instance_;
PROTOBUF_CONSTEXPR Fixed64List::Fixed64List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Fixed64ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Fixed64ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Fixed64ListDefaultTypeInternal() {}
  union {
    Fixed64List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Fixed64ListDefaultTypeInternal _Fixed64List_default_instance_;
PROTOBUF_CONSTEXPR Sfixed32List::Sfixed32List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sfixed32ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sfixed32ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sfixed32ListDefaultTypeInternal() {}
  union {
    Sfixed32List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sfixed32ListDefaultTypeInternal _Sfixed32List_default_instance_;
PROTOBUF_CONSTEXPR Sfixed64List::Sfixed64List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Sfixed64ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Sfixed64ListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Sfixed64ListDefaultTypeInternal() {}
  union {
    Sfixed64List _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Sfixed64ListDefaultTypeInternal _Sfixed64List_default_instance_;
PROTOBUF_CONSTEXPR BoolList::BoolList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoolListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoolListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoolListDefaultTypeInternal() {}
  union {
    BoolList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolListDefaultTypeInternal _BoolList_default_instance_;
PROTOBUF_CONSTEXPR StringList::StringList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringListDefaultTypeInternal() {}
  union {
    StringList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringListDefaultTypeInternal _StringList_default_instance_;
PROTOBUF_CONSTEXPR BytesList::BytesList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BytesListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BytesListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BytesListDefaultTypeInternal() {}
  union {
    BytesList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BytesListDefaultTypeInternal _BytesList_default_instance_;
PROTOBUF_CONSTEXPR GlobalMetadata::GlobalMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attr_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GlobalMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalMetadataDefaultTypeInternal() {}
  union {
    GlobalMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalMetadataDefaultTypeInternal _GlobalMetadata_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ctrl_deps_)*/{}
  , /*decltype(_impl_._ctrl_deps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_deps_)*/{}
  , /*decltype(_impl_._data_deps_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attr_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inputs_)*/nullptr
  , /*decltype(_impl_.outputs_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.start_time_micros_)*/uint64_t{0u}
  , /*decltype(_impl_.duration_micros_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR IOInfo::IOInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shapes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.types_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IOInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IOInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IOInfoDefaultTypeInternal() {}
  union {
    IOInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IOInfoDefaultTypeInternal _IOInfo_default_instance_;
PROTOBUF_CONSTEXPR Tensor::Tensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tensor_id_)*/uint64_t{0u}
  , /*decltype(_impl_.storage_id_)*/uint64_t{0u}
  , /*decltype(_impl_.offset_)*/uint64_t{0u}
  , /*decltype(_impl_.num_elem_)*/uint64_t{0u}
  , /*decltype(_impl_.elem_bytes_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorDefaultTypeInternal() {}
  union {
    Tensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorDefaultTypeInternal _Tensor_default_instance_;
}  // namespace ChakraProtoMsg
static ::_pb::Metadata file_level_metadata_et_5fdef_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_et_5fdef_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_et_5fdef_2eproto = nullptr;

const uint32_t TableStruct_et_5fdef_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::AttributeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::AttributeProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::AttributeProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::AttributeProto, _impl_.doc_string_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::AttributeProto, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::DoubleList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::DoubleList, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::FloatList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::FloatList, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Int32List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Int32List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Int64List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Int64List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Uint32List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Uint32List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Uint64List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Uint64List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Sint32List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Sint32List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Sint64List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Sint64List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Fixed32List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Fixed32List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Fixed64List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Fixed64List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Sfixed32List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Sfixed32List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Sfixed64List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Sfixed64List, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::BoolList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::BoolList, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::StringList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::StringList, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::BytesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::BytesList, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::GlobalMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::GlobalMetadata, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::GlobalMetadata, _impl_.attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.ctrl_deps_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.data_deps_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.start_time_micros_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.duration_micros_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.inputs_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.outputs_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Node, _impl_.attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::IOInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::IOInfo, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::IOInfo, _impl_.shapes_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::IOInfo, _impl_.types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Tensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Tensor, _impl_.tensor_id_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Tensor, _impl_.storage_id_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Tensor, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Tensor, _impl_.num_elem_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Tensor, _impl_.elem_bytes_),
  PROTOBUF_FIELD_OFFSET(::ChakraProtoMsg::Tensor, _impl_.device_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ChakraProtoMsg::AttributeProto)},
  { 39, -1, -1, sizeof(::ChakraProtoMsg::DoubleList)},
  { 46, -1, -1, sizeof(::ChakraProtoMsg::FloatList)},
  { 53, -1, -1, sizeof(::ChakraProtoMsg::Int32List)},
  { 60, -1, -1, sizeof(::ChakraProtoMsg::Int64List)},
  { 67, -1, -1, sizeof(::ChakraProtoMsg::Uint32List)},
  { 74, -1, -1, sizeof(::ChakraProtoMsg::Uint64List)},
  { 81, -1, -1, sizeof(::ChakraProtoMsg::Sint32List)},
  { 88, -1, -1, sizeof(::ChakraProtoMsg::Sint64List)},
  { 95, -1, -1, sizeof(::ChakraProtoMsg::Fixed32List)},
  { 102, -1, -1, sizeof(::ChakraProtoMsg::Fixed64List)},
  { 109, -1, -1, sizeof(::ChakraProtoMsg::Sfixed32List)},
  { 116, -1, -1, sizeof(::ChakraProtoMsg::Sfixed64List)},
  { 123, -1, -1, sizeof(::ChakraProtoMsg::BoolList)},
  { 130, -1, -1, sizeof(::ChakraProtoMsg::StringList)},
  { 137, -1, -1, sizeof(::ChakraProtoMsg::BytesList)},
  { 144, -1, -1, sizeof(::ChakraProtoMsg::GlobalMetadata)},
  { 152, -1, -1, sizeof(::ChakraProtoMsg::Node)},
  { 168, -1, -1, sizeof(::ChakraProtoMsg::IOInfo)},
  { 177, -1, -1, sizeof(::ChakraProtoMsg::Tensor)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ChakraProtoMsg::_AttributeProto_default_instance_._instance,
  &::ChakraProtoMsg::_DoubleList_default_instance_._instance,
  &::ChakraProtoMsg::_FloatList_default_instance_._instance,
  &::ChakraProtoMsg::_Int32List_default_instance_._instance,
  &::ChakraProtoMsg::_Int64List_default_instance_._instance,
  &::ChakraProtoMsg::_Uint32List_default_instance_._instance,
  &::ChakraProtoMsg::_Uint64List_default_instance_._instance,
  &::ChakraProtoMsg::_Sint32List_default_instance_._instance,
  &::ChakraProtoMsg::_Sint64List_default_instance_._instance,
  &::ChakraProtoMsg::_Fixed32List_default_instance_._instance,
  &::ChakraProtoMsg::_Fixed64List_default_instance_._instance,
  &::ChakraProtoMsg::_Sfixed32List_default_instance_._instance,
  &::ChakraProtoMsg::_Sfixed64List_default_instance_._instance,
  &::ChakraProtoMsg::_BoolList_default_instance_._instance,
  &::ChakraProtoMsg::_StringList_default_instance_._instance,
  &::ChakraProtoMsg::_BytesList_default_instance_._instance,
  &::ChakraProtoMsg::_GlobalMetadata_default_instance_._instance,
  &::ChakraProtoMsg::_Node_default_instance_._instance,
  &::ChakraProtoMsg::_IOInfo_default_instance_._instance,
  &::ChakraProtoMsg::_Tensor_default_instance_._instance,
};

const char descriptor_table_protodef_et_5fdef_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014et_def.proto\022\016ChakraProtoMsg\"\202\t\n\016Attri"
  "buteProto\022\014\n\004name\030\001 \001(\t\022\022\n\ndoc_string\030\002 "
  "\001(\t\022\024\n\ndouble_val\030\003 \001(\001H\000\0221\n\013double_list"
  "\030\004 \001(\0132\032.ChakraProtoMsg.DoubleListH\000\022\023\n\t"
  "float_val\030\005 \001(\002H\000\022/\n\nfloat_list\030\006 \001(\0132\031."
  "ChakraProtoMsg.FloatListH\000\022\023\n\tint32_val\030"
  "\007 \001(\005H\000\022/\n\nint32_list\030\010 \001(\0132\031.ChakraProt"
  "oMsg.Int32ListH\000\022\023\n\tint64_val\030\t \001(\003H\000\022/\n"
  "\nint64_list\030\n \001(\0132\031.ChakraProtoMsg.Int64"
  "ListH\000\022\024\n\nuint32_val\030\013 \001(\rH\000\0221\n\013uint32_l"
  "ist\030\014 \001(\0132\032.ChakraProtoMsg.Uint32ListH\000\022"
  "\024\n\nuint64_val\030\r \001(\004H\000\0221\n\013uint64_list\030\016 \001"
  "(\0132\032.ChakraProtoMsg.Uint64ListH\000\022\024\n\nsint"
  "32_val\030\017 \001(\021H\000\0221\n\013sint32_list\030\020 \001(\0132\032.Ch"
  "akraProtoMsg.Sint32ListH\000\022\024\n\nsint64_val\030"
  "\021 \001(\022H\000\0221\n\013sint64_list\030\022 \001(\0132\032.ChakraPro"
  "toMsg.Sint64ListH\000\022\025\n\013fixed32_val\030\023 \001(\007H"
  "\000\0223\n\014fixed32_list\030\024 \001(\0132\033.ChakraProtoMsg"
  ".Fixed32ListH\000\022\025\n\013fixed64_val\030\025 \001(\006H\000\0223\n"
  "\014fixed64_list\030\026 \001(\0132\033.ChakraProtoMsg.Fix"
  "ed64ListH\000\022\026\n\014sfixed32_val\030\027 \001(\017H\000\0225\n\rsf"
  "ixed32_list\030\030 \001(\0132\034.ChakraProtoMsg.Sfixe"
  "d32ListH\000\022\026\n\014sfixed64_val\030\031 \001(\020H\000\0225\n\rsfi"
  "xed64_list\030\032 \001(\0132\034.ChakraProtoMsg.Sfixed"
  "64ListH\000\022\022\n\010bool_val\030\033 \001(\010H\000\022-\n\tbool_lis"
  "t\030\034 \001(\0132\030.ChakraProtoMsg.BoolListH\000\022\024\n\ns"
  "tring_val\030\035 \001(\tH\000\0221\n\013string_list\030\036 \001(\0132\032"
  ".ChakraProtoMsg.StringListH\000\022\023\n\tbytes_va"
  "l\030\037 \001(\014H\000\022/\n\nbytes_list\030  \001(\0132\031.ChakraPr"
  "otoMsg.BytesListH\000B\007\n\005value\"\034\n\nDoubleLis"
  "t\022\016\n\006values\030\001 \003(\001\"\033\n\tFloatList\022\016\n\006values"
  "\030\001 \003(\002\"\033\n\tInt32List\022\016\n\006values\030\001 \003(\005\"\033\n\tI"
  "nt64List\022\016\n\006values\030\001 \003(\003\"\034\n\nUint32List\022\016"
  "\n\006values\030\001 \003(\r\"\034\n\nUint64List\022\016\n\006values\030\001"
  " \003(\004\"\034\n\nSint32List\022\016\n\006values\030\001 \003(\021\"\034\n\nSi"
  "nt64List\022\016\n\006values\030\001 \003(\022\"\035\n\013Fixed32List\022"
  "\016\n\006values\030\001 \003(\007\"\035\n\013Fixed64List\022\016\n\006values"
  "\030\001 \003(\006\"\036\n\014Sfixed32List\022\016\n\006values\030\001 \003(\017\"\036"
  "\n\014Sfixed64List\022\016\n\006values\030\001 \003(\020\"\032\n\010BoolLi"
  "st\022\016\n\006values\030\001 \003(\010\"\034\n\nStringList\022\016\n\006valu"
  "es\030\001 \003(\t\"\033\n\tBytesList\022\016\n\006values\030\001 \003(\014\"O\n"
  "\016GlobalMetadata\022\017\n\007version\030\001 \001(\t\022,\n\004attr"
  "\030\002 \003(\0132\036.ChakraProtoMsg.AttributeProto\"\241"
  "\002\n\004Node\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022&\n\004typ"
  "e\030\003 \001(\0162\030.ChakraProtoMsg.NodeType\022\021\n\tctr"
  "l_deps\030\004 \003(\004\022\021\n\tdata_deps\030\005 \003(\004\022\031\n\021start"
  "_time_micros\030\006 \001(\004\022\027\n\017duration_micros\030\007 "
  "\001(\004\022&\n\006inputs\030\010 \001(\0132\026.ChakraProtoMsg.IOI"
  "nfo\022\'\n\007outputs\030\t \001(\0132\026.ChakraProtoMsg.IO"
  "Info\022,\n\004attr\030\n \003(\0132\036.ChakraProtoMsg.Attr"
  "ibuteProto\"7\n\006IOInfo\022\016\n\006values\030\001 \001(\t\022\016\n\006"
  "shapes\030\002 \001(\t\022\r\n\005types\030\003 \001(\t\"u\n\006Tensor\022\021\n"
  "\ttensor_id\030\001 \001(\004\022\022\n\nstorage_id\030\002 \001(\004\022\016\n\006"
  "offset\030\003 \001(\004\022\020\n\010num_elem\030\004 \001(\004\022\022\n\nelem_b"
  "ytes\030\005 \001(\004\022\016\n\006device\030\006 \001(\t*\241\001\n\010NodeType\022"
  "\020\n\014INVALID_NODE\020\000\022\021\n\rMETADATA_NODE\020\001\022\021\n\r"
  "MEM_LOAD_NODE\020\002\022\022\n\016MEM_STORE_NODE\020\003\022\r\n\tC"
  "OMP_NODE\020\004\022\022\n\016COMM_SEND_NODE\020\005\022\022\n\016COMM_R"
  "ECV_NODE\020\006\022\022\n\016COMM_COLL_NODE\020\007*\263\001\n\022Colle"
  "ctiveCommType\022\016\n\nALL_REDUCE\020\000\022\n\n\006REDUCE\020"
  "\001\022\016\n\nALL_GATHER\020\002\022\n\n\006GATHER\020\003\022\013\n\007SCATTER"
  "\020\004\022\r\n\tBROADCAST\020\005\022\016\n\nALL_TO_ALL\020\006\022\022\n\016RED"
  "UCE_SCATTER\020\007\022\030\n\024REDUCE_SCATTER_BLOCK\020\010\022"
  "\013\n\007BARRIER\020\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_et_5fdef_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_et_5fdef_2eproto = {
    false, false, 2540, descriptor_table_protodef_et_5fdef_2eproto,
    "et_def.proto",
    &descriptor_table_et_5fdef_2eproto_once, nullptr, 0, 20,
    schemas, file_default_instances, TableStruct_et_5fdef_2eproto::offsets,
    file_level_metadata_et_5fdef_2eproto, file_level_enum_descriptors_et_5fdef_2eproto,
    file_level_service_descriptors_et_5fdef_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_et_5fdef_2eproto_getter() {
  return &descriptor_table_et_5fdef_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_et_5fdef_2eproto(&descriptor_table_et_5fdef_2eproto);
namespace ChakraProtoMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_et_5fdef_2eproto);
  return file_level_enum_descriptors_et_5fdef_2eproto[0];
}
bool NodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectiveCommType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_et_5fdef_2eproto);
  return file_level_enum_descriptors_et_5fdef_2eproto[1];
}
bool CollectiveCommType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AttributeProto::_Internal {
 public:
  static const ::ChakraProtoMsg::DoubleList& double_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::FloatList& float_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Int32List& int32_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Int64List& int64_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Uint32List& uint32_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Uint64List& uint64_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Sint32List& sint32_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Sint64List& sint64_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Fixed32List& fixed32_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Fixed64List& fixed64_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Sfixed32List& sfixed32_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::Sfixed64List& sfixed64_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::BoolList& bool_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::StringList& string_list(const AttributeProto* msg);
  static const ::ChakraProtoMsg::BytesList& bytes_list(const AttributeProto* msg);
};

const ::ChakraProtoMsg::DoubleList&
AttributeProto::_Internal::double_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.double_list_;
}
const ::ChakraProtoMsg::FloatList&
AttributeProto::_Internal::float_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.float_list_;
}
const ::ChakraProtoMsg::Int32List&
AttributeProto::_Internal::int32_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.int32_list_;
}
const ::ChakraProtoMsg::Int64List&
AttributeProto::_Internal::int64_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.int64_list_;
}
const ::ChakraProtoMsg::Uint32List&
AttributeProto::_Internal::uint32_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.uint32_list_;
}
const ::ChakraProtoMsg::Uint64List&
AttributeProto::_Internal::uint64_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.uint64_list_;
}
const ::ChakraProtoMsg::Sint32List&
AttributeProto::_Internal::sint32_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.sint32_list_;
}
const ::ChakraProtoMsg::Sint64List&
AttributeProto::_Internal::sint64_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.sint64_list_;
}
const ::ChakraProtoMsg::Fixed32List&
AttributeProto::_Internal::fixed32_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.fixed32_list_;
}
const ::ChakraProtoMsg::Fixed64List&
AttributeProto::_Internal::fixed64_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.fixed64_list_;
}
const ::ChakraProtoMsg::Sfixed32List&
AttributeProto::_Internal::sfixed32_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.sfixed32_list_;
}
const ::ChakraProtoMsg::Sfixed64List&
AttributeProto::_Internal::sfixed64_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.sfixed64_list_;
}
const ::ChakraProtoMsg::BoolList&
AttributeProto::_Internal::bool_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.bool_list_;
}
const ::ChakraProtoMsg::StringList&
AttributeProto::_Internal::string_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.string_list_;
}
const ::ChakraProtoMsg::BytesList&
AttributeProto::_Internal::bytes_list(const AttributeProto* msg) {
  return *msg->_impl_.value_.bytes_list_;
}
void AttributeProto::set_allocated_double_list(::ChakraProtoMsg::DoubleList* double_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (double_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(double_list);
    if (message_arena != submessage_arena) {
      double_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_list, submessage_arena);
    }
    set_has_double_list();
    _impl_.value_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.double_list)
}
void AttributeProto::set_allocated_float_list(::ChakraProtoMsg::FloatList* float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(float_list);
    if (message_arena != submessage_arena) {
      float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_list, submessage_arena);
    }
    set_has_float_list();
    _impl_.value_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.float_list)
}
void AttributeProto::set_allocated_int32_list(::ChakraProtoMsg::Int32List* int32_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (int32_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int32_list);
    if (message_arena != submessage_arena) {
      int32_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int32_list, submessage_arena);
    }
    set_has_int32_list();
    _impl_.value_.int32_list_ = int32_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.int32_list)
}
void AttributeProto::set_allocated_int64_list(::ChakraProtoMsg::Int64List* int64_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (int64_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(int64_list);
    if (message_arena != submessage_arena) {
      int64_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int64_list, submessage_arena);
    }
    set_has_int64_list();
    _impl_.value_.int64_list_ = int64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.int64_list)
}
void AttributeProto::set_allocated_uint32_list(::ChakraProtoMsg::Uint32List* uint32_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uint32_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uint32_list);
    if (message_arena != submessage_arena) {
      uint32_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint32_list, submessage_arena);
    }
    set_has_uint32_list();
    _impl_.value_.uint32_list_ = uint32_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.uint32_list)
}
void AttributeProto::set_allocated_uint64_list(::ChakraProtoMsg::Uint64List* uint64_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (uint64_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uint64_list);
    if (message_arena != submessage_arena) {
      uint64_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint64_list, submessage_arena);
    }
    set_has_uint64_list();
    _impl_.value_.uint64_list_ = uint64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.uint64_list)
}
void AttributeProto::set_allocated_sint32_list(::ChakraProtoMsg::Sint32List* sint32_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sint32_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sint32_list);
    if (message_arena != submessage_arena) {
      sint32_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint32_list, submessage_arena);
    }
    set_has_sint32_list();
    _impl_.value_.sint32_list_ = sint32_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.sint32_list)
}
void AttributeProto::set_allocated_sint64_list(::ChakraProtoMsg::Sint64List* sint64_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sint64_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sint64_list);
    if (message_arena != submessage_arena) {
      sint64_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint64_list, submessage_arena);
    }
    set_has_sint64_list();
    _impl_.value_.sint64_list_ = sint64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.sint64_list)
}
void AttributeProto::set_allocated_fixed32_list(::ChakraProtoMsg::Fixed32List* fixed32_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (fixed32_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fixed32_list);
    if (message_arena != submessage_arena) {
      fixed32_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed32_list, submessage_arena);
    }
    set_has_fixed32_list();
    _impl_.value_.fixed32_list_ = fixed32_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.fixed32_list)
}
void AttributeProto::set_allocated_fixed64_list(::ChakraProtoMsg::Fixed64List* fixed64_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (fixed64_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fixed64_list);
    if (message_arena != submessage_arena) {
      fixed64_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed64_list, submessage_arena);
    }
    set_has_fixed64_list();
    _impl_.value_.fixed64_list_ = fixed64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.fixed64_list)
}
void AttributeProto::set_allocated_sfixed32_list(::ChakraProtoMsg::Sfixed32List* sfixed32_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sfixed32_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sfixed32_list);
    if (message_arena != submessage_arena) {
      sfixed32_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sfixed32_list, submessage_arena);
    }
    set_has_sfixed32_list();
    _impl_.value_.sfixed32_list_ = sfixed32_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.sfixed32_list)
}
void AttributeProto::set_allocated_sfixed64_list(::ChakraProtoMsg::Sfixed64List* sfixed64_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (sfixed64_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sfixed64_list);
    if (message_arena != submessage_arena) {
      sfixed64_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sfixed64_list, submessage_arena);
    }
    set_has_sfixed64_list();
    _impl_.value_.sfixed64_list_ = sfixed64_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.sfixed64_list)
}
void AttributeProto::set_allocated_bool_list(::ChakraProtoMsg::BoolList* bool_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (bool_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bool_list);
    if (message_arena != submessage_arena) {
      bool_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_list, submessage_arena);
    }
    set_has_bool_list();
    _impl_.value_.bool_list_ = bool_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.bool_list)
}
void AttributeProto::set_allocated_string_list(::ChakraProtoMsg::StringList* string_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (string_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_list);
    if (message_arena != submessage_arena) {
      string_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_list, submessage_arena);
    }
    set_has_string_list();
    _impl_.value_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.string_list)
}
void AttributeProto::set_allocated_bytes_list(::ChakraProtoMsg::BytesList* bytes_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (bytes_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bytes_list);
    if (message_arena != submessage_arena) {
      bytes_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_list, submessage_arena);
    }
    set_has_bytes_list();
    _impl_.value_.bytes_list_ = bytes_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ChakraProtoMsg.AttributeProto.bytes_list)
}
AttributeProto::AttributeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.AttributeProto)
}
AttributeProto::AttributeProto(const AttributeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttributeProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_doc_string().empty()) {
    _this->_impl_.doc_string_.Set(from._internal_doc_string(), 
      _this->GetArenaForAllocation());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kDoubleVal: {
      _this->_internal_set_double_val(from._internal_double_val());
      break;
    }
    case kDoubleList: {
      _this->_internal_mutable_double_list()->::ChakraProtoMsg::DoubleList::MergeFrom(
          from._internal_double_list());
      break;
    }
    case kFloatVal: {
      _this->_internal_set_float_val(from._internal_float_val());
      break;
    }
    case kFloatList: {
      _this->_internal_mutable_float_list()->::ChakraProtoMsg::FloatList::MergeFrom(
          from._internal_float_list());
      break;
    }
    case kInt32Val: {
      _this->_internal_set_int32_val(from._internal_int32_val());
      break;
    }
    case kInt32List: {
      _this->_internal_mutable_int32_list()->::ChakraProtoMsg::Int32List::MergeFrom(
          from._internal_int32_list());
      break;
    }
    case kInt64Val: {
      _this->_internal_set_int64_val(from._internal_int64_val());
      break;
    }
    case kInt64List: {
      _this->_internal_mutable_int64_list()->::ChakraProtoMsg::Int64List::MergeFrom(
          from._internal_int64_list());
      break;
    }
    case kUint32Val: {
      _this->_internal_set_uint32_val(from._internal_uint32_val());
      break;
    }
    case kUint32List: {
      _this->_internal_mutable_uint32_list()->::ChakraProtoMsg::Uint32List::MergeFrom(
          from._internal_uint32_list());
      break;
    }
    case kUint64Val: {
      _this->_internal_set_uint64_val(from._internal_uint64_val());
      break;
    }
    case kUint64List: {
      _this->_internal_mutable_uint64_list()->::ChakraProtoMsg::Uint64List::MergeFrom(
          from._internal_uint64_list());
      break;
    }
    case kSint32Val: {
      _this->_internal_set_sint32_val(from._internal_sint32_val());
      break;
    }
    case kSint32List: {
      _this->_internal_mutable_sint32_list()->::ChakraProtoMsg::Sint32List::MergeFrom(
          from._internal_sint32_list());
      break;
    }
    case kSint64Val: {
      _this->_internal_set_sint64_val(from._internal_sint64_val());
      break;
    }
    case kSint64List: {
      _this->_internal_mutable_sint64_list()->::ChakraProtoMsg::Sint64List::MergeFrom(
          from._internal_sint64_list());
      break;
    }
    case kFixed32Val: {
      _this->_internal_set_fixed32_val(from._internal_fixed32_val());
      break;
    }
    case kFixed32List: {
      _this->_internal_mutable_fixed32_list()->::ChakraProtoMsg::Fixed32List::MergeFrom(
          from._internal_fixed32_list());
      break;
    }
    case kFixed64Val: {
      _this->_internal_set_fixed64_val(from._internal_fixed64_val());
      break;
    }
    case kFixed64List: {
      _this->_internal_mutable_fixed64_list()->::ChakraProtoMsg::Fixed64List::MergeFrom(
          from._internal_fixed64_list());
      break;
    }
    case kSfixed32Val: {
      _this->_internal_set_sfixed32_val(from._internal_sfixed32_val());
      break;
    }
    case kSfixed32List: {
      _this->_internal_mutable_sfixed32_list()->::ChakraProtoMsg::Sfixed32List::MergeFrom(
          from._internal_sfixed32_list());
      break;
    }
    case kSfixed64Val: {
      _this->_internal_set_sfixed64_val(from._internal_sfixed64_val());
      break;
    }
    case kSfixed64List: {
      _this->_internal_mutable_sfixed64_list()->::ChakraProtoMsg::Sfixed64List::MergeFrom(
          from._internal_sfixed64_list());
      break;
    }
    case kBoolVal: {
      _this->_internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kBoolList: {
      _this->_internal_mutable_bool_list()->::ChakraProtoMsg::BoolList::MergeFrom(
          from._internal_bool_list());
      break;
    }
    case kStringVal: {
      _this->_internal_set_string_val(from._internal_string_val());
      break;
    }
    case kStringList: {
      _this->_internal_mutable_string_list()->::ChakraProtoMsg::StringList::MergeFrom(
          from._internal_string_list());
      break;
    }
    case kBytesVal: {
      _this->_internal_set_bytes_val(from._internal_bytes_val());
      break;
    }
    case kBytesList: {
      _this->_internal_mutable_bytes_list()->::ChakraProtoMsg::BytesList::MergeFrom(
          from._internal_bytes_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.AttributeProto)
}

inline void AttributeProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.doc_string_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

AttributeProto::~AttributeProto() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.AttributeProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.doc_string_.Destroy();
  if (has_value()) {
    clear_value();
  }
}

void AttributeProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttributeProto::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:ChakraProtoMsg.AttributeProto)
  switch (value_case()) {
    case kDoubleVal: {
      // No need to clear
      break;
    }
    case kDoubleList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.double_list_;
      }
      break;
    }
    case kFloatVal: {
      // No need to clear
      break;
    }
    case kFloatList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.float_list_;
      }
      break;
    }
    case kInt32Val: {
      // No need to clear
      break;
    }
    case kInt32List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.int32_list_;
      }
      break;
    }
    case kInt64Val: {
      // No need to clear
      break;
    }
    case kInt64List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.int64_list_;
      }
      break;
    }
    case kUint32Val: {
      // No need to clear
      break;
    }
    case kUint32List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uint32_list_;
      }
      break;
    }
    case kUint64Val: {
      // No need to clear
      break;
    }
    case kUint64List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.uint64_list_;
      }
      break;
    }
    case kSint32Val: {
      // No need to clear
      break;
    }
    case kSint32List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sint32_list_;
      }
      break;
    }
    case kSint64Val: {
      // No need to clear
      break;
    }
    case kSint64List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sint64_list_;
      }
      break;
    }
    case kFixed32Val: {
      // No need to clear
      break;
    }
    case kFixed32List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.fixed32_list_;
      }
      break;
    }
    case kFixed64Val: {
      // No need to clear
      break;
    }
    case kFixed64List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.fixed64_list_;
      }
      break;
    }
    case kSfixed32Val: {
      // No need to clear
      break;
    }
    case kSfixed32List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sfixed32_list_;
      }
      break;
    }
    case kSfixed64Val: {
      // No need to clear
      break;
    }
    case kSfixed64List: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.sfixed64_list_;
      }
      break;
    }
    case kBoolVal: {
      // No need to clear
      break;
    }
    case kBoolList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.bool_list_;
      }
      break;
    }
    case kStringVal: {
      _impl_.value_.string_val_.Destroy();
      break;
    }
    case kStringList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.string_list_;
      }
      break;
    }
    case kBytesVal: {
      _impl_.value_.bytes_val_.Destroy();
      break;
    }
    case kBytesList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.bytes_list_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void AttributeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.AttributeProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.doc_string_.ClearToEmpty();
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.AttributeProto.name"));
        } else
          goto handle_unusual;
        continue;
      // string doc_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_doc_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.AttributeProto.doc_string"));
        } else
          goto handle_unusual;
        continue;
      // double double_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _internal_set_double_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.DoubleList double_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float_val = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _internal_set_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.FloatList float_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int32_val = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_int32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Int32List int32_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_int32_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_val = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_int64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Int64List int64_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_int64_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uint32_val = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_uint32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Uint32List uint32_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_uint32_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uint64_val = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _internal_set_uint64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Uint64List uint64_list = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_uint64_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 sint32_val = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _internal_set_sint32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Sint32List sint32_list = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint32_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint64 sint64_val = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_sint64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Sint64List sint64_list = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint64_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed32 fixed32_val = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _internal_set_fixed32_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Fixed32List fixed32_list = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed32_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed64 fixed64_val = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _internal_set_fixed64_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Fixed64List fixed64_list = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed64_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sfixed32 sfixed32_val = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _internal_set_sfixed32_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Sfixed32List sfixed32_list = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_sfixed32_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sfixed64 sfixed64_val = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _internal_set_sfixed64_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.Sfixed64List sfixed64_list = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_sfixed64_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool_val = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _internal_set_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.BoolList bool_list = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string string_val = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_string_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.AttributeProto.string_val"));
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.StringList string_list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bytes_val = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_bytes_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.BytesList bytes_list = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_bytes_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.AttributeProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.AttributeProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string doc_string = 2;
  if (!this->_internal_doc_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc_string().data(), static_cast<int>(this->_internal_doc_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.AttributeProto.doc_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_doc_string(), target);
  }

  // double double_val = 3;
  if (_internal_has_double_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_val(), target);
  }

  // .ChakraProtoMsg.DoubleList double_list = 4;
  if (_internal_has_double_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::double_list(this),
        _Internal::double_list(this).GetCachedSize(), target, stream);
  }

  // float float_val = 5;
  if (_internal_has_float_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_float_val(), target);
  }

  // .ChakraProtoMsg.FloatList float_list = 6;
  if (_internal_has_float_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::float_list(this),
        _Internal::float_list(this).GetCachedSize(), target, stream);
  }

  // int32 int32_val = 7;
  if (_internal_has_int32_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_int32_val(), target);
  }

  // .ChakraProtoMsg.Int32List int32_list = 8;
  if (_internal_has_int32_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::int32_list(this),
        _Internal::int32_list(this).GetCachedSize(), target, stream);
  }

  // int64 int64_val = 9;
  if (_internal_has_int64_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_int64_val(), target);
  }

  // .ChakraProtoMsg.Int64List int64_list = 10;
  if (_internal_has_int64_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::int64_list(this),
        _Internal::int64_list(this).GetCachedSize(), target, stream);
  }

  // uint32 uint32_val = 11;
  if (_internal_has_uint32_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_uint32_val(), target);
  }

  // .ChakraProtoMsg.Uint32List uint32_list = 12;
  if (_internal_has_uint32_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::uint32_list(this),
        _Internal::uint32_list(this).GetCachedSize(), target, stream);
  }

  // uint64 uint64_val = 13;
  if (_internal_has_uint64_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_uint64_val(), target);
  }

  // .ChakraProtoMsg.Uint64List uint64_list = 14;
  if (_internal_has_uint64_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::uint64_list(this),
        _Internal::uint64_list(this).GetCachedSize(), target, stream);
  }

  // sint32 sint32_val = 15;
  if (_internal_has_sint32_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(15, this->_internal_sint32_val(), target);
  }

  // .ChakraProtoMsg.Sint32List sint32_list = 16;
  if (_internal_has_sint32_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::sint32_list(this),
        _Internal::sint32_list(this).GetCachedSize(), target, stream);
  }

  // sint64 sint64_val = 17;
  if (_internal_has_sint64_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(17, this->_internal_sint64_val(), target);
  }

  // .ChakraProtoMsg.Sint64List sint64_list = 18;
  if (_internal_has_sint64_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::sint64_list(this),
        _Internal::sint64_list(this).GetCachedSize(), target, stream);
  }

  // fixed32 fixed32_val = 19;
  if (_internal_has_fixed32_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(19, this->_internal_fixed32_val(), target);
  }

  // .ChakraProtoMsg.Fixed32List fixed32_list = 20;
  if (_internal_has_fixed32_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::fixed32_list(this),
        _Internal::fixed32_list(this).GetCachedSize(), target, stream);
  }

  // fixed64 fixed64_val = 21;
  if (_internal_has_fixed64_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(21, this->_internal_fixed64_val(), target);
  }

  // .ChakraProtoMsg.Fixed64List fixed64_list = 22;
  if (_internal_has_fixed64_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::fixed64_list(this),
        _Internal::fixed64_list(this).GetCachedSize(), target, stream);
  }

  // sfixed32 sfixed32_val = 23;
  if (_internal_has_sfixed32_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(23, this->_internal_sfixed32_val(), target);
  }

  // .ChakraProtoMsg.Sfixed32List sfixed32_list = 24;
  if (_internal_has_sfixed32_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::sfixed32_list(this),
        _Internal::sfixed32_list(this).GetCachedSize(), target, stream);
  }

  // sfixed64 sfixed64_val = 25;
  if (_internal_has_sfixed64_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(25, this->_internal_sfixed64_val(), target);
  }

  // .ChakraProtoMsg.Sfixed64List sfixed64_list = 26;
  if (_internal_has_sfixed64_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::sfixed64_list(this),
        _Internal::sfixed64_list(this).GetCachedSize(), target, stream);
  }

  // bool bool_val = 27;
  if (_internal_has_bool_val()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_bool_val(), target);
  }

  // .ChakraProtoMsg.BoolList bool_list = 28;
  if (_internal_has_bool_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::bool_list(this),
        _Internal::bool_list(this).GetCachedSize(), target, stream);
  }

  // string string_val = 29;
  if (_internal_has_string_val()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_val().data(), static_cast<int>(this->_internal_string_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.AttributeProto.string_val");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_string_val(), target);
  }

  // .ChakraProtoMsg.StringList string_list = 30;
  if (_internal_has_string_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::string_list(this),
        _Internal::string_list(this).GetCachedSize(), target, stream);
  }

  // bytes bytes_val = 31;
  if (_internal_has_bytes_val()) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_bytes_val(), target);
  }

  // .ChakraProtoMsg.BytesList bytes_list = 32;
  if (_internal_has_bytes_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::bytes_list(this),
        _Internal::bytes_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.AttributeProto)
  return target;
}

size_t AttributeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.AttributeProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string doc_string = 2;
  if (!this->_internal_doc_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc_string());
  }

  switch (value_case()) {
    // double double_val = 3;
    case kDoubleVal: {
      total_size += 1 + 8;
      break;
    }
    // .ChakraProtoMsg.DoubleList double_list = 4;
    case kDoubleList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.double_list_);
      break;
    }
    // float float_val = 5;
    case kFloatVal: {
      total_size += 1 + 4;
      break;
    }
    // .ChakraProtoMsg.FloatList float_list = 6;
    case kFloatList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.float_list_);
      break;
    }
    // int32 int32_val = 7;
    case kInt32Val: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32_val());
      break;
    }
    // .ChakraProtoMsg.Int32List int32_list = 8;
    case kInt32List: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.int32_list_);
      break;
    }
    // int64 int64_val = 9;
    case kInt64Val: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_val());
      break;
    }
    // .ChakraProtoMsg.Int64List int64_list = 10;
    case kInt64List: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.int64_list_);
      break;
    }
    // uint32 uint32_val = 11;
    case kUint32Val: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uint32_val());
      break;
    }
    // .ChakraProtoMsg.Uint32List uint32_list = 12;
    case kUint32List: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uint32_list_);
      break;
    }
    // uint64 uint64_val = 13;
    case kUint64Val: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64_val());
      break;
    }
    // .ChakraProtoMsg.Uint64List uint64_list = 14;
    case kUint64List: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.uint64_list_);
      break;
    }
    // sint32 sint32_val = 15;
    case kSint32Val: {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_sint32_val());
      break;
    }
    // .ChakraProtoMsg.Sint32List sint32_list = 16;
    case kSint32List: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sint32_list_);
      break;
    }
    // sint64 sint64_val = 17;
    case kSint64Val: {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt64Size(
          this->_internal_sint64_val());
      break;
    }
    // .ChakraProtoMsg.Sint64List sint64_list = 18;
    case kSint64List: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sint64_list_);
      break;
    }
    // fixed32 fixed32_val = 19;
    case kFixed32Val: {
      total_size += 2 + 4;
      break;
    }
    // .ChakraProtoMsg.Fixed32List fixed32_list = 20;
    case kFixed32List: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.fixed32_list_);
      break;
    }
    // fixed64 fixed64_val = 21;
    case kFixed64Val: {
      total_size += 2 + 8;
      break;
    }
    // .ChakraProtoMsg.Fixed64List fixed64_list = 22;
    case kFixed64List: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.fixed64_list_);
      break;
    }
    // sfixed32 sfixed32_val = 23;
    case kSfixed32Val: {
      total_size += 2 + 4;
      break;
    }
    // .ChakraProtoMsg.Sfixed32List sfixed32_list = 24;
    case kSfixed32List: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sfixed32_list_);
      break;
    }
    // sfixed64 sfixed64_val = 25;
    case kSfixed64Val: {
      total_size += 2 + 8;
      break;
    }
    // .ChakraProtoMsg.Sfixed64List sfixed64_list = 26;
    case kSfixed64List: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.sfixed64_list_);
      break;
    }
    // bool bool_val = 27;
    case kBoolVal: {
      total_size += 2 + 1;
      break;
    }
    // .ChakraProtoMsg.BoolList bool_list = 28;
    case kBoolList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.bool_list_);
      break;
    }
    // string string_val = 29;
    case kStringVal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_val());
      break;
    }
    // .ChakraProtoMsg.StringList string_list = 30;
    case kStringList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.string_list_);
      break;
    }
    // bytes bytes_val = 31;
    case kBytesVal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_val());
      break;
    }
    // .ChakraProtoMsg.BytesList bytes_list = 32;
    case kBytesList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.bytes_list_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttributeProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeProto::GetClassData() const { return &_class_data_; }


void AttributeProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttributeProto*>(&to_msg);
  auto& from = static_cast<const AttributeProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.AttributeProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_doc_string().empty()) {
    _this->_internal_set_doc_string(from._internal_doc_string());
  }
  switch (from.value_case()) {
    case kDoubleVal: {
      _this->_internal_set_double_val(from._internal_double_val());
      break;
    }
    case kDoubleList: {
      _this->_internal_mutable_double_list()->::ChakraProtoMsg::DoubleList::MergeFrom(
          from._internal_double_list());
      break;
    }
    case kFloatVal: {
      _this->_internal_set_float_val(from._internal_float_val());
      break;
    }
    case kFloatList: {
      _this->_internal_mutable_float_list()->::ChakraProtoMsg::FloatList::MergeFrom(
          from._internal_float_list());
      break;
    }
    case kInt32Val: {
      _this->_internal_set_int32_val(from._internal_int32_val());
      break;
    }
    case kInt32List: {
      _this->_internal_mutable_int32_list()->::ChakraProtoMsg::Int32List::MergeFrom(
          from._internal_int32_list());
      break;
    }
    case kInt64Val: {
      _this->_internal_set_int64_val(from._internal_int64_val());
      break;
    }
    case kInt64List: {
      _this->_internal_mutable_int64_list()->::ChakraProtoMsg::Int64List::MergeFrom(
          from._internal_int64_list());
      break;
    }
    case kUint32Val: {
      _this->_internal_set_uint32_val(from._internal_uint32_val());
      break;
    }
    case kUint32List: {
      _this->_internal_mutable_uint32_list()->::ChakraProtoMsg::Uint32List::MergeFrom(
          from._internal_uint32_list());
      break;
    }
    case kUint64Val: {
      _this->_internal_set_uint64_val(from._internal_uint64_val());
      break;
    }
    case kUint64List: {
      _this->_internal_mutable_uint64_list()->::ChakraProtoMsg::Uint64List::MergeFrom(
          from._internal_uint64_list());
      break;
    }
    case kSint32Val: {
      _this->_internal_set_sint32_val(from._internal_sint32_val());
      break;
    }
    case kSint32List: {
      _this->_internal_mutable_sint32_list()->::ChakraProtoMsg::Sint32List::MergeFrom(
          from._internal_sint32_list());
      break;
    }
    case kSint64Val: {
      _this->_internal_set_sint64_val(from._internal_sint64_val());
      break;
    }
    case kSint64List: {
      _this->_internal_mutable_sint64_list()->::ChakraProtoMsg::Sint64List::MergeFrom(
          from._internal_sint64_list());
      break;
    }
    case kFixed32Val: {
      _this->_internal_set_fixed32_val(from._internal_fixed32_val());
      break;
    }
    case kFixed32List: {
      _this->_internal_mutable_fixed32_list()->::ChakraProtoMsg::Fixed32List::MergeFrom(
          from._internal_fixed32_list());
      break;
    }
    case kFixed64Val: {
      _this->_internal_set_fixed64_val(from._internal_fixed64_val());
      break;
    }
    case kFixed64List: {
      _this->_internal_mutable_fixed64_list()->::ChakraProtoMsg::Fixed64List::MergeFrom(
          from._internal_fixed64_list());
      break;
    }
    case kSfixed32Val: {
      _this->_internal_set_sfixed32_val(from._internal_sfixed32_val());
      break;
    }
    case kSfixed32List: {
      _this->_internal_mutable_sfixed32_list()->::ChakraProtoMsg::Sfixed32List::MergeFrom(
          from._internal_sfixed32_list());
      break;
    }
    case kSfixed64Val: {
      _this->_internal_set_sfixed64_val(from._internal_sfixed64_val());
      break;
    }
    case kSfixed64List: {
      _this->_internal_mutable_sfixed64_list()->::ChakraProtoMsg::Sfixed64List::MergeFrom(
          from._internal_sfixed64_list());
      break;
    }
    case kBoolVal: {
      _this->_internal_set_bool_val(from._internal_bool_val());
      break;
    }
    case kBoolList: {
      _this->_internal_mutable_bool_list()->::ChakraProtoMsg::BoolList::MergeFrom(
          from._internal_bool_list());
      break;
    }
    case kStringVal: {
      _this->_internal_set_string_val(from._internal_string_val());
      break;
    }
    case kStringList: {
      _this->_internal_mutable_string_list()->::ChakraProtoMsg::StringList::MergeFrom(
          from._internal_string_list());
      break;
    }
    case kBytesVal: {
      _this->_internal_set_bytes_val(from._internal_bytes_val());
      break;
    }
    case kBytesList: {
      _this->_internal_mutable_bytes_list()->::ChakraProtoMsg::BytesList::MergeFrom(
          from._internal_bytes_list());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeProto::CopyFrom(const AttributeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.AttributeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeProto::IsInitialized() const {
  return true;
}

void AttributeProto::InternalSwap(AttributeProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_string_, lhs_arena,
      &other->_impl_.doc_string_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[0]);
}

// ===================================================================

class DoubleList::_Internal {
 public:
};

DoubleList::DoubleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.DoubleList)
}
DoubleList::DoubleList(const DoubleList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DoubleList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.DoubleList)
}

inline void DoubleList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DoubleList::~DoubleList() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.DoubleList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoubleList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void DoubleList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoubleList::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.DoubleList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoubleList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoubleList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.DoubleList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.DoubleList)
  return target;
}

size_t DoubleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.DoubleList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoubleList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DoubleList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoubleList::GetClassData() const { return &_class_data_; }


void DoubleList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DoubleList*>(&to_msg);
  auto& from = static_cast<const DoubleList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.DoubleList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoubleList::CopyFrom(const DoubleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.DoubleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleList::IsInitialized() const {
  return true;
}

void DoubleList::InternalSwap(DoubleList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[1]);
}

// ===================================================================

class FloatList::_Internal {
 public:
};

FloatList::FloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.FloatList)
}
FloatList::FloatList(const FloatList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FloatList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.FloatList)
}

inline void FloatList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FloatList::~FloatList() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.FloatList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void FloatList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.FloatList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FloatList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.FloatList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.FloatList)
  return target;
}

size_t FloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.FloatList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FloatList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FloatList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FloatList::GetClassData() const { return &_class_data_; }


void FloatList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FloatList*>(&to_msg);
  auto& from = static_cast<const FloatList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.FloatList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FloatList::CopyFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatList::IsInitialized() const {
  return true;
}

void FloatList::InternalSwap(FloatList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[2]);
}

// ===================================================================

class Int32List::_Internal {
 public:
};

Int32List::Int32List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Int32List)
}
Int32List::Int32List(const Int32List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Int32List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Int32List)
}

inline void Int32List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Int32List::~Int32List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Int32List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int32List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Int32List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Int32List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Int32List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int32List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int32List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Int32List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 values = 1;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Int32List)
  return target;
}

size_t Int32List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Int32List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 values = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int32List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Int32List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int32List::GetClassData() const { return &_class_data_; }


void Int32List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Int32List*>(&to_msg);
  auto& from = static_cast<const Int32List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Int32List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int32List::CopyFrom(const Int32List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Int32List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32List::IsInitialized() const {
  return true;
}

void Int32List::InternalSwap(Int32List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int32List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[3]);
}

// ===================================================================

class Int64List::_Internal {
 public:
};

Int64List::Int64List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Int64List)
}
Int64List::Int64List(const Int64List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Int64List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Int64List)
}

inline void Int64List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Int64List::~Int64List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Int64List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Int64List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Int64List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Int64List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Int64List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Int64List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Int64List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Int64List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 values = 1;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Int64List)
  return target;
}

size_t Int64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Int64List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 values = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Int64List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Int64List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Int64List::GetClassData() const { return &_class_data_; }


void Int64List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Int64List*>(&to_msg);
  auto& from = static_cast<const Int64List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Int64List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Int64List::CopyFrom(const Int64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Int64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64List::IsInitialized() const {
  return true;
}

void Int64List::InternalSwap(Int64List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int64List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[4]);
}

// ===================================================================

class Uint32List::_Internal {
 public:
};

Uint32List::Uint32List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Uint32List)
}
Uint32List::Uint32List(const Uint32List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Uint32List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Uint32List)
}

inline void Uint32List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Uint32List::~Uint32List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Uint32List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uint32List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Uint32List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Uint32List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Uint32List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint32List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uint32List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Uint32List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 values = 1;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Uint32List)
  return target;
}

size_t Uint32List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Uint32List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 values = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uint32List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Uint32List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uint32List::GetClassData() const { return &_class_data_; }


void Uint32List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Uint32List*>(&to_msg);
  auto& from = static_cast<const Uint32List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Uint32List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uint32List::CopyFrom(const Uint32List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Uint32List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint32List::IsInitialized() const {
  return true;
}

void Uint32List::InternalSwap(Uint32List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint32List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[5]);
}

// ===================================================================

class Uint64List::_Internal {
 public:
};

Uint64List::Uint64List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Uint64List)
}
Uint64List::Uint64List(const Uint64List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Uint64List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Uint64List)
}

inline void Uint64List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Uint64List::~Uint64List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Uint64List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uint64List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Uint64List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Uint64List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Uint64List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint64List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uint64List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Uint64List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 values = 1;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Uint64List)
  return target;
}

size_t Uint64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Uint64List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 values = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uint64List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Uint64List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uint64List::GetClassData() const { return &_class_data_; }


void Uint64List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Uint64List*>(&to_msg);
  auto& from = static_cast<const Uint64List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Uint64List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uint64List::CopyFrom(const Uint64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Uint64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint64List::IsInitialized() const {
  return true;
}

void Uint64List::InternalSwap(Uint64List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint64List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[6]);
}

// ===================================================================

class Sint32List::_Internal {
 public:
};

Sint32List::Sint32List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Sint32List)
}
Sint32List::Sint32List(const Sint32List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sint32List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Sint32List)
}

inline void Sint32List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sint32List::~Sint32List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Sint32List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sint32List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Sint32List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sint32List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Sint32List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sint32List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint32 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sint32List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Sint32List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 values = 1;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Sint32List)
  return target;
}

size_t Sint32List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Sint32List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 values = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sint32List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sint32List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sint32List::GetClassData() const { return &_class_data_; }


void Sint32List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sint32List*>(&to_msg);
  auto& from = static_cast<const Sint32List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Sint32List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sint32List::CopyFrom(const Sint32List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Sint32List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sint32List::IsInitialized() const {
  return true;
}

void Sint32List::InternalSwap(Sint32List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sint32List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[7]);
}

// ===================================================================

class Sint64List::_Internal {
 public:
};

Sint64List::Sint64List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Sint64List)
}
Sint64List::Sint64List(const Sint64List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sint64List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Sint64List)
}

inline void Sint64List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._values_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sint64List::~Sint64List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Sint64List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sint64List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Sint64List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sint64List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Sint64List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sint64List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sint64 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sint64List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Sint64List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint64 values = 1;
  {
    int byte_size = _impl_._values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          1, _internal_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Sint64List)
  return target;
}

size_t Sint64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Sint64List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint64 values = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->_impl_.values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sint64List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sint64List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sint64List::GetClassData() const { return &_class_data_; }


void Sint64List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sint64List*>(&to_msg);
  auto& from = static_cast<const Sint64List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Sint64List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sint64List::CopyFrom(const Sint64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Sint64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sint64List::IsInitialized() const {
  return true;
}

void Sint64List::InternalSwap(Sint64List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sint64List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[8]);
}

// ===================================================================

class Fixed32List::_Internal {
 public:
};

Fixed32List::Fixed32List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Fixed32List)
}
Fixed32List::Fixed32List(const Fixed32List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Fixed32List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Fixed32List)
}

inline void Fixed32List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Fixed32List::~Fixed32List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Fixed32List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fixed32List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Fixed32List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Fixed32List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Fixed32List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fixed32List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fixed32List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Fixed32List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Fixed32List)
  return target;
}

size_t Fixed32List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Fixed32List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fixed32List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Fixed32List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fixed32List::GetClassData() const { return &_class_data_; }


void Fixed32List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Fixed32List*>(&to_msg);
  auto& from = static_cast<const Fixed32List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Fixed32List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fixed32List::CopyFrom(const Fixed32List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Fixed32List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fixed32List::IsInitialized() const {
  return true;
}

void Fixed32List::InternalSwap(Fixed32List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fixed32List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[9]);
}

// ===================================================================

class Fixed64List::_Internal {
 public:
};

Fixed64List::Fixed64List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Fixed64List)
}
Fixed64List::Fixed64List(const Fixed64List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Fixed64List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Fixed64List)
}

inline void Fixed64List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Fixed64List::~Fixed64List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Fixed64List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fixed64List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Fixed64List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Fixed64List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Fixed64List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fixed64List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fixed64List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Fixed64List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Fixed64List)
  return target;
}

size_t Fixed64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Fixed64List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fixed64List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Fixed64List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fixed64List::GetClassData() const { return &_class_data_; }


void Fixed64List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Fixed64List*>(&to_msg);
  auto& from = static_cast<const Fixed64List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Fixed64List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fixed64List::CopyFrom(const Fixed64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Fixed64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fixed64List::IsInitialized() const {
  return true;
}

void Fixed64List::InternalSwap(Fixed64List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fixed64List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[10]);
}

// ===================================================================

class Sfixed32List::_Internal {
 public:
};

Sfixed32List::Sfixed32List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Sfixed32List)
}
Sfixed32List::Sfixed32List(const Sfixed32List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sfixed32List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Sfixed32List)
}

inline void Sfixed32List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sfixed32List::~Sfixed32List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Sfixed32List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sfixed32List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Sfixed32List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sfixed32List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Sfixed32List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sfixed32List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sfixed32 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sfixed32List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Sfixed32List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sfixed32 values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Sfixed32List)
  return target;
}

size_t Sfixed32List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Sfixed32List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sfixed32 values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sfixed32List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sfixed32List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sfixed32List::GetClassData() const { return &_class_data_; }


void Sfixed32List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sfixed32List*>(&to_msg);
  auto& from = static_cast<const Sfixed32List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Sfixed32List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sfixed32List::CopyFrom(const Sfixed32List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Sfixed32List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sfixed32List::IsInitialized() const {
  return true;
}

void Sfixed32List::InternalSwap(Sfixed32List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sfixed32List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[11]);
}

// ===================================================================

class Sfixed64List::_Internal {
 public:
};

Sfixed64List::Sfixed64List(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Sfixed64List)
}
Sfixed64List::Sfixed64List(const Sfixed64List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sfixed64List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Sfixed64List)
}

inline void Sfixed64List::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sfixed64List::~Sfixed64List() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Sfixed64List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sfixed64List::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void Sfixed64List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sfixed64List::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Sfixed64List)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sfixed64List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated sfixed64 values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sfixed64List::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Sfixed64List)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sfixed64 values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Sfixed64List)
  return target;
}

size_t Sfixed64List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Sfixed64List)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sfixed64 values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sfixed64List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sfixed64List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sfixed64List::GetClassData() const { return &_class_data_; }


void Sfixed64List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sfixed64List*>(&to_msg);
  auto& from = static_cast<const Sfixed64List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Sfixed64List)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sfixed64List::CopyFrom(const Sfixed64List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Sfixed64List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sfixed64List::IsInitialized() const {
  return true;
}

void Sfixed64List::InternalSwap(Sfixed64List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sfixed64List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[12]);
}

// ===================================================================

class BoolList::_Internal {
 public:
};

BoolList::BoolList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.BoolList)
}
BoolList::BoolList(const BoolList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoolList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.BoolList)
}

inline void BoolList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoolList::~BoolList() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.BoolList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoolList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
}

void BoolList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoolList::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.BoolList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoolList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoolList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.BoolList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool values = 1;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.BoolList)
  return target;
}

size_t BoolList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.BoolList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoolList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoolList::GetClassData() const { return &_class_data_; }


void BoolList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoolList*>(&to_msg);
  auto& from = static_cast<const BoolList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.BoolList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoolList::CopyFrom(const BoolList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.BoolList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolList::IsInitialized() const {
  return true;
}

void BoolList::InternalSwap(BoolList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[13]);
}

// ===================================================================

class StringList::_Internal {
 public:
};

StringList::StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.StringList)
}
StringList::StringList(const StringList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.StringList)
}

inline void StringList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StringList::~StringList() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.StringList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void StringList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.StringList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.StringList.values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.StringList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.StringList.values");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.StringList)
  return target;
}

size_t StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.StringList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.values_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringList::GetClassData() const { return &_class_data_; }


void StringList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringList*>(&to_msg);
  auto& from = static_cast<const StringList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.StringList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringList::CopyFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {
  return true;
}

void StringList::InternalSwap(StringList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[14]);
}

// ===================================================================

class BytesList::_Internal {
 public:
};

BytesList::BytesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.BytesList)
}
BytesList::BytesList(const BytesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BytesList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.BytesList)
}

inline void BytesList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BytesList::~BytesList() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.BytesList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BytesList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void BytesList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BytesList::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.BytesList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BytesList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BytesList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.BytesList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.BytesList)
  return target;
}

size_t BytesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.BytesList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.values_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BytesList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BytesList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BytesList::GetClassData() const { return &_class_data_; }


void BytesList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BytesList*>(&to_msg);
  auto& from = static_cast<const BytesList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.BytesList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BytesList::CopyFrom(const BytesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.BytesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesList::IsInitialized() const {
  return true;
}

void BytesList::InternalSwap(BytesList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BytesList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[15]);
}

// ===================================================================

class GlobalMetadata::_Internal {
 public:
};

GlobalMetadata::GlobalMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.GlobalMetadata)
}
GlobalMetadata::GlobalMetadata(const GlobalMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GlobalMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attr_){from._impl_.attr_}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.GlobalMetadata)
}

inline void GlobalMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attr_){arena}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GlobalMetadata::~GlobalMetadata() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.GlobalMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attr_.~RepeatedPtrField();
  _impl_.version_.Destroy();
}

void GlobalMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.GlobalMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attr_.Clear();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.GlobalMetadata.version"));
        } else
          goto handle_unusual;
        continue;
      // repeated .ChakraProtoMsg.AttributeProto attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GlobalMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.GlobalMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.GlobalMetadata.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated .ChakraProtoMsg.AttributeProto attr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attr_size()); i < n; i++) {
    const auto& repfield = this->_internal_attr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.GlobalMetadata)
  return target;
}

size_t GlobalMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.GlobalMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ChakraProtoMsg.AttributeProto attr = 2;
  total_size += 1UL * this->_internal_attr_size();
  for (const auto& msg : this->_impl_.attr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalMetadata::GetClassData() const { return &_class_data_; }


void GlobalMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalMetadata*>(&to_msg);
  auto& from = static_cast<const GlobalMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.GlobalMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attr_.MergeFrom(from._impl_.attr_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalMetadata::CopyFrom(const GlobalMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.GlobalMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalMetadata::IsInitialized() const {
  return true;
}

void GlobalMetadata::InternalSwap(GlobalMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attr_.InternalSwap(&other->_impl_.attr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[16]);
}

// ===================================================================

class Node::_Internal {
 public:
  static const ::ChakraProtoMsg::IOInfo& inputs(const Node* msg);
  static const ::ChakraProtoMsg::IOInfo& outputs(const Node* msg);
};

const ::ChakraProtoMsg::IOInfo&
Node::_Internal::inputs(const Node* msg) {
  return *msg->_impl_.inputs_;
}
const ::ChakraProtoMsg::IOInfo&
Node::_Internal::outputs(const Node* msg) {
  return *msg->_impl_.outputs_;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ctrl_deps_){from._impl_.ctrl_deps_}
    , /*decltype(_impl_._ctrl_deps_cached_byte_size_)*/{0}
    , decltype(_impl_.data_deps_){from._impl_.data_deps_}
    , /*decltype(_impl_._data_deps_cached_byte_size_)*/{0}
    , decltype(_impl_.attr_){from._impl_.attr_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.inputs_){nullptr}
    , decltype(_impl_.outputs_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.start_time_micros_){}
    , decltype(_impl_.duration_micros_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inputs()) {
    _this->_impl_.inputs_ = new ::ChakraProtoMsg::IOInfo(*from._impl_.inputs_);
  }
  if (from._internal_has_outputs()) {
    _this->_impl_.outputs_ = new ::ChakraProtoMsg::IOInfo(*from._impl_.outputs_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ctrl_deps_){arena}
    , /*decltype(_impl_._ctrl_deps_cached_byte_size_)*/{0}
    , decltype(_impl_.data_deps_){arena}
    , /*decltype(_impl_._data_deps_cached_byte_size_)*/{0}
    , decltype(_impl_.attr_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.inputs_){nullptr}
    , decltype(_impl_.outputs_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.start_time_micros_){uint64_t{0u}}
    , decltype(_impl_.duration_micros_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ctrl_deps_.~RepeatedField();
  _impl_.data_deps_.~RepeatedField();
  _impl_.attr_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inputs_;
  if (this != internal_default_instance()) delete _impl_.outputs_;
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ctrl_deps_.Clear();
  _impl_.data_deps_.Clear();
  _impl_.attr_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.inputs_ != nullptr) {
    delete _impl_.inputs_;
  }
  _impl_.inputs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.outputs_ != nullptr) {
    delete _impl_.outputs_;
  }
  _impl_.outputs_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.Node.name"));
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.NodeType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ChakraProtoMsg::NodeType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 ctrl_deps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ctrl_deps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_ctrl_deps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 data_deps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_data_deps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_data_deps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start_time_micros = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.start_time_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 duration_micros = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.duration_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.IOInfo inputs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inputs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChakraProtoMsg.IOInfo outputs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_outputs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ChakraProtoMsg.AttributeProto attr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.Node.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .ChakraProtoMsg.NodeType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated uint64 ctrl_deps = 4;
  {
    int byte_size = _impl_._ctrl_deps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_ctrl_deps(), byte_size, target);
    }
  }

  // repeated uint64 data_deps = 5;
  {
    int byte_size = _impl_._data_deps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_data_deps(), byte_size, target);
    }
  }

  // uint64 start_time_micros = 6;
  if (this->_internal_start_time_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_start_time_micros(), target);
  }

  // uint64 duration_micros = 7;
  if (this->_internal_duration_micros() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_duration_micros(), target);
  }

  // .ChakraProtoMsg.IOInfo inputs = 8;
  if (this->_internal_has_inputs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inputs(this),
        _Internal::inputs(this).GetCachedSize(), target, stream);
  }

  // .ChakraProtoMsg.IOInfo outputs = 9;
  if (this->_internal_has_outputs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::outputs(this),
        _Internal::outputs(this).GetCachedSize(), target, stream);
  }

  // repeated .ChakraProtoMsg.AttributeProto attr = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attr_size()); i < n; i++) {
    const auto& repfield = this->_internal_attr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ctrl_deps = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.ctrl_deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ctrl_deps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 data_deps = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.data_deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_deps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .ChakraProtoMsg.AttributeProto attr = 10;
  total_size += 1UL * this->_internal_attr_size();
  for (const auto& msg : this->_impl_.attr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .ChakraProtoMsg.IOInfo inputs = 8;
  if (this->_internal_has_inputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inputs_);
  }

  // .ChakraProtoMsg.IOInfo outputs = 9;
  if (this->_internal_has_outputs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outputs_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 start_time_micros = 6;
  if (this->_internal_start_time_micros() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_time_micros());
  }

  // uint64 duration_micros = 7;
  if (this->_internal_duration_micros() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_duration_micros());
  }

  // .ChakraProtoMsg.NodeType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ctrl_deps_.MergeFrom(from._impl_.ctrl_deps_);
  _this->_impl_.data_deps_.MergeFrom(from._impl_.data_deps_);
  _this->_impl_.attr_.MergeFrom(from._impl_.attr_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_inputs()) {
    _this->_internal_mutable_inputs()->::ChakraProtoMsg::IOInfo::MergeFrom(
        from._internal_inputs());
  }
  if (from._internal_has_outputs()) {
    _this->_internal_mutable_outputs()->::ChakraProtoMsg::IOInfo::MergeFrom(
        from._internal_outputs());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_start_time_micros() != 0) {
    _this->_internal_set_start_time_micros(from._internal_start_time_micros());
  }
  if (from._internal_duration_micros() != 0) {
    _this->_internal_set_duration_micros(from._internal_duration_micros());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ctrl_deps_.InternalSwap(&other->_impl_.ctrl_deps_);
  _impl_.data_deps_.InternalSwap(&other->_impl_.data_deps_);
  _impl_.attr_.InternalSwap(&other->_impl_.attr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, _impl_.type_)
      + sizeof(Node::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Node, _impl_.inputs_)>(
          reinterpret_cast<char*>(&_impl_.inputs_),
          reinterpret_cast<char*>(&other->_impl_.inputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[17]);
}

// ===================================================================

class IOInfo::_Internal {
 public:
};

IOInfo::IOInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.IOInfo)
}
IOInfo::IOInfo(const IOInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IOInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){}
    , decltype(_impl_.shapes_){}
    , decltype(_impl_.types_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.values_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.values_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_values().empty()) {
    _this->_impl_.values_.Set(from._internal_values(), 
      _this->GetArenaForAllocation());
  }
  _impl_.shapes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shapes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shapes().empty()) {
    _this->_impl_.shapes_.Set(from._internal_shapes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.types_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.types_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_types().empty()) {
    _this->_impl_.types_.Set(from._internal_types(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.IOInfo)
}

inline void IOInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){}
    , decltype(_impl_.shapes_){}
    , decltype(_impl_.types_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.values_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.values_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shapes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shapes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.types_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.types_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IOInfo::~IOInfo() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.IOInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IOInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.Destroy();
  _impl_.shapes_.Destroy();
  _impl_.types_.Destroy();
}

void IOInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IOInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.IOInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.ClearToEmpty();
  _impl_.shapes_.ClearToEmpty();
  _impl_.types_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IOInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_values();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.IOInfo.values"));
        } else
          goto handle_unusual;
        continue;
      // string shapes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_shapes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.IOInfo.shapes"));
        } else
          goto handle_unusual;
        continue;
      // string types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_types();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.IOInfo.types"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IOInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.IOInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string values = 1;
  if (!this->_internal_values().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_values().data(), static_cast<int>(this->_internal_values().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.IOInfo.values");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_values(), target);
  }

  // string shapes = 2;
  if (!this->_internal_shapes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shapes().data(), static_cast<int>(this->_internal_shapes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.IOInfo.shapes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_shapes(), target);
  }

  // string types = 3;
  if (!this->_internal_types().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_types().data(), static_cast<int>(this->_internal_types().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.IOInfo.types");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_types(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.IOInfo)
  return target;
}

size_t IOInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.IOInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string values = 1;
  if (!this->_internal_values().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_values());
  }

  // string shapes = 2;
  if (!this->_internal_shapes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shapes());
  }

  // string types = 3;
  if (!this->_internal_types().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_types());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IOInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IOInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IOInfo::GetClassData() const { return &_class_data_; }


void IOInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IOInfo*>(&to_msg);
  auto& from = static_cast<const IOInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.IOInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_values().empty()) {
    _this->_internal_set_values(from._internal_values());
  }
  if (!from._internal_shapes().empty()) {
    _this->_internal_set_shapes(from._internal_shapes());
  }
  if (!from._internal_types().empty()) {
    _this->_internal_set_types(from._internal_types());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IOInfo::CopyFrom(const IOInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.IOInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOInfo::IsInitialized() const {
  return true;
}

void IOInfo::InternalSwap(IOInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.values_, lhs_arena,
      &other->_impl_.values_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shapes_, lhs_arena,
      &other->_impl_.shapes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.types_, lhs_arena,
      &other->_impl_.types_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IOInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[18]);
}

// ===================================================================

class Tensor::_Internal {
 public:
};

Tensor::Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChakraProtoMsg.Tensor)
}
Tensor::Tensor(const Tensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){}
    , decltype(_impl_.tensor_id_){}
    , decltype(_impl_.storage_id_){}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.num_elem_){}
    , decltype(_impl_.elem_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tensor_id_, &from._impl_.tensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.elem_bytes_) -
    reinterpret_cast<char*>(&_impl_.tensor_id_)) + sizeof(_impl_.elem_bytes_));
  // @@protoc_insertion_point(copy_constructor:ChakraProtoMsg.Tensor)
}

inline void Tensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){}
    , decltype(_impl_.tensor_id_){uint64_t{0u}}
    , decltype(_impl_.storage_id_){uint64_t{0u}}
    , decltype(_impl_.offset_){uint64_t{0u}}
    , decltype(_impl_.num_elem_){uint64_t{0u}}
    , decltype(_impl_.elem_bytes_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tensor::~Tensor() {
  // @@protoc_insertion_point(destructor:ChakraProtoMsg.Tensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_.Destroy();
}

void Tensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:ChakraProtoMsg.Tensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_.ClearToEmpty();
  ::memset(&_impl_.tensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.elem_bytes_) -
      reinterpret_cast<char*>(&_impl_.tensor_id_)) + sizeof(_impl_.elem_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 storage_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.storage_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 num_elem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_elem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 elem_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.elem_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ChakraProtoMsg.Tensor.device"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChakraProtoMsg.Tensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tensor_id = 1;
  if (this->_internal_tensor_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tensor_id(), target);
  }

  // uint64 storage_id = 2;
  if (this->_internal_storage_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_storage_id(), target);
  }

  // uint64 offset = 3;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_offset(), target);
  }

  // uint64 num_elem = 4;
  if (this->_internal_num_elem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_elem(), target);
  }

  // uint64 elem_bytes = 5;
  if (this->_internal_elem_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_elem_bytes(), target);
  }

  // string device = 6;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChakraProtoMsg.Tensor.device");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChakraProtoMsg.Tensor)
  return target;
}

size_t Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChakraProtoMsg.Tensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device = 6;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // uint64 tensor_id = 1;
  if (this->_internal_tensor_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tensor_id());
  }

  // uint64 storage_id = 2;
  if (this->_internal_storage_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_storage_id());
  }

  // uint64 offset = 3;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // uint64 num_elem = 4;
  if (this->_internal_num_elem() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num_elem());
  }

  // uint64 elem_bytes = 5;
  if (this->_internal_elem_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_elem_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tensor::GetClassData() const { return &_class_data_; }


void Tensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tensor*>(&to_msg);
  auto& from = static_cast<const Tensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChakraProtoMsg.Tensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (from._internal_tensor_id() != 0) {
    _this->_internal_set_tensor_id(from._internal_tensor_id());
  }
  if (from._internal_storage_id() != 0) {
    _this->_internal_set_storage_id(from._internal_storage_id());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_num_elem() != 0) {
    _this->_internal_set_num_elem(from._internal_num_elem());
  }
  if (from._internal_elem_bytes() != 0) {
    _this->_internal_set_elem_bytes(from._internal_elem_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tensor::CopyFrom(const Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChakraProtoMsg.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tensor::IsInitialized() const {
  return true;
}

void Tensor::InternalSwap(Tensor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tensor, _impl_.elem_bytes_)
      + sizeof(Tensor::_impl_.elem_bytes_)
      - PROTOBUF_FIELD_OFFSET(Tensor, _impl_.tensor_id_)>(
          reinterpret_cast<char*>(&_impl_.tensor_id_),
          reinterpret_cast<char*>(&other->_impl_.tensor_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_et_5fdef_2eproto_getter, &descriptor_table_et_5fdef_2eproto_once,
      file_level_metadata_et_5fdef_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ChakraProtoMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::AttributeProto*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::AttributeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::AttributeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::DoubleList*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::DoubleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::DoubleList >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::FloatList*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::FloatList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::FloatList >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Int32List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Int32List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Int32List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Int64List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Int64List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Int64List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Uint32List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Uint32List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Uint32List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Uint64List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Uint64List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Uint64List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Sint32List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Sint32List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Sint32List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Sint64List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Sint64List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Sint64List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Fixed32List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Fixed32List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Fixed32List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Fixed64List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Fixed64List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Fixed64List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Sfixed32List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Sfixed32List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Sfixed32List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Sfixed64List*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Sfixed64List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Sfixed64List >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::BoolList*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::BoolList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::BoolList >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::StringList*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::StringList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::StringList >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::BytesList*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::BytesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::BytesList >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::GlobalMetadata*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::GlobalMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::GlobalMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Node*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::IOInfo*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::IOInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::IOInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ChakraProtoMsg::Tensor*
Arena::CreateMaybeMessage< ::ChakraProtoMsg::Tensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChakraProtoMsg::Tensor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
